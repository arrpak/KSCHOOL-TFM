plot(cumsum(rt(100,5), type = "l"))
plot(cumsum(rt(100,5)), type = "l")
curve(dcauchy, 5, -5)
num.sin <- ppois(1, 3000)  #intenisad 3000 eventos al mes
econ <-  sum(exp(rnorm(num.sin , 3, 4)))
res <- replicate(1000,foo)
hist(res)
res <- replicate(10000,foo)
class(res)
hist(res,)
hist(res, breaks = 100)
num.sin <- rpois(1, 3000)  #intenisad 3000 eventos al mes
foo <-  function () {
num.sin <- rpois(1, 3000)  #intenisad 3000 eventos al mes
econ <-  sum(exp(rnorm(num.sin , 3, 4)))
}
res <- replicate(10000,foo)
class(res)
hist(res, breaks = 100)
foo <-  function () {
n <- rpois(1, 3000)  #intenisad 3000 eventos al mes
sum(exp(rnorm(n , 3, 4)))
}
res <- replicate(10000,foo)
class(res)
hist(res, breaks = 100)
foo <-  function () {
n <- rpois(1, 3000)  #intenisad 3000 eventos al mes
sum(exp(rnorm(n , 3, 4)))
}
res <- replicate(10000,foo())
class(res)
hist(res, breaks = 100)
foo <-  function (t) {
n <- rpois(1, 3000*t)  #intenisad 3000 eventos al mes
sum(exp(rnorm(n , 3, 4)))
}
res <- replicate(10000,foo(1))
class(res)
hist(res, breaks = 100)
hist(rnorm(1000,2,3))
hist(rnorm(1000000,2,3))
res <-  sapply(1000:10000, function(x)
sum(sample(1:x,100) <= 100)
)
plot(1000:10000,res)
boxplot(res, 1000:10000)
res <-  sapply(1000:10000, function(x)
sum(sample(1:x,100) <= 100)
)
boxplot(res, 1000:10000)
boxplot(1000:10000 ~ res)
res
sample(1,20)
sample(1:10,20)
sum(sample(1:1000,100) <= 100)
sample(1:1000,100)
sample(1:1000,100) <= 100
sum(sample(1:1000,10) <= 100)
sample(1:1000,10)
library(ggplot2)
library(rstan)
stanmodelcode <- '
data {
int A;
int B;
int a;
int b;
}
parameters {
real<lower=0, upper = 1> pa;
real<lower=0, upper = 1> pb;
}
model {
// priori no informativa
pa ~ beta(1,1);
pb ~ beta(1,1);
// verosimilitud
a ~ binomial(A, pa);
b ~ binomial(B, pb);
}
'
fit <- stan(model_code = stanmodelcode,
data = list(A = N.A, B = N.B, a = n.a, b = n.b),
iter = 12000, warmup = 2000,
chains = 4, thin = 10)
set.seed(1234)
N.A <- rpois(1, 10000) # Grupo A
N.B <- rpois(1, 10000)
p.a <- 0.02
p.b <- 0.025
n.a <- rbinom(1, N.A, p.a)
n.b <- rbinom(1, N.B, p.b)
# test de hipótesis "frecuentista":
prop.test(c(n.a, n.b), c(N.A, N.B))
# test de hipótesis basado en remuestreos (cambios de etiquetas):
# con este test de etiquetas simulo que no hay efecto.
diferencia.props.real <- n.b / N.B - n.a / N.A
mascara    <- rep(c("a", "b"), times = c(N.A, N.B))
resultados <- rep(0, length(mascara))
resultados[1:(n.a + n.b)] <- 1
res <- replicate(10000, tapply(sample(resultados), mascara, mean))
res <- t(res)
hist(res[,2] - res[,1], col = "gray")
abline(v = diferencia.props.real, col = "red")
library(ggplot2)
library(rstan)
stanmodelcode <- '
data {
int A;
int B;
int a;
int b;
}
parameters {
real<lower=0, upper = 1> pa;
real<lower=0, upper = 1> pb;
}
model {
// priori no informativa
pa ~ beta(1,1);
pb ~ beta(1,1);
// verosimilitud
a ~ binomial(A, pa);
b ~ binomial(B, pb);
}
'
fit <- stan(model_code = stanmodelcode,
data = list(A = N.A, B = N.B, a = n.a, b = n.b),
iter = 12000, warmup = 2000,
chains = 4, thin = 10)
fit <- stan(model_code = stanmodelcode,
data = list(A = N.A, B = N.B, a = n.a, b = n.b),
iter = 12000, warmup = 2000,
chains = 4, thin = 10)
res <- as.data.frame(fit)
library(ggplot2)
library(rstan)
stanmodelcode <- '
data {
int A;
int B;
int a;
int b;
}
parameters {
real<lower=0, upper = 1> pa;
real<lower=0, upper = 1> pb;
}
model {
// priori no informativa
pa ~ beta(1,1);
pb ~ beta(1,1);
// verosimilitud
a ~ binomial(A, pa);
b ~ binomial(B, pb);
}
'
fit <- stan(model_code = stanmodelcode,
data = list(A = N.A, B = N.B, a = n.a, b = n.b),
iter = 12000, warmup = 2000,
chains = 4, thin = 10)
res <- as.data.frame(fit)
res$delta <- res$pb - res$pa
hist(res$delta, col = "gray", breaks = 30)
library(ggplot2)
library(rstan)
install.packages('rstudioapi')
library(rstudioapi)
rtools <- "C:\\Rtools\\bin"
gcc <- "C:\\Rtools\\gcc-4.6.3\\bin"
path <- strsplit(Sys.getenv("PATH"), ";")[[1]]
new_path <- c(rtools, gcc, path)
new_path <- new_path[!duplicated(tolower(new_path))]
Sys.setenv(PATH = paste(new_path, collapse = ";"))
stanmodelcode <- '
data {
int A;
int B;
int a;
int b;
}
parameters {
real<lower=0, upper = 1> pa;
real<lower=0, upper = 1> pb;
}
model {
// priori no informativa
pa ~ beta(1,1);
pb ~ beta(1,1);
// verosimilitud
a ~ binomial(A, pa);
b ~ binomial(B, pb);
}
'
fit <- stan(model_code = stanmodelcode,
data = list(A = N.A, B = N.B, a = n.a, b = n.b),
iter = 12000, warmup = 2000,
chains = 4, thin = 10)
length(iris[[1]])
length(iris[[1]])
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: body
library(data.table)
library(plyr)
sample_list <- function(list){
mascara <- sample(length(list[[1]]))
list(model.data=list[mascara>list$cutoff,], model.subdata=list[mascara<=list$cutoff,])
}
extract_subset <- function(data, group_by, ratio){
datatable <- data.table(data, key=group_by)
datatable <- datatable[,cutoff:= .N*ratio, by=group_by]
datatable.split <- dlply(datatable, group_by, sample_list)
list(main_set = ldply(datatable.split, function(x){x[[1]]}),
subbset = ldply(datatable.split, function(x){x[[2]]}))
}
data_model <- extract_subset(iris, 'Species', 0.3)
str(data_model,2)
# Chunk 3: original
length(iris[[1]])
library(rstan)
setwd("~/Proyecto- Frontour")
library(shiny)
runApp(appDir = "Frontur_CM")
runApp(appDir = "Frontur_CM")
runApp(appDir = "Frontur_CM")
runApp(appDir = "Frontur_CM")
runApp(appDir = "Frontur_CM")
View(Ft_res)
rm(list=ls())
library(dplyr)
library(plyr)
#CARGA PARAMETROS DE ENTRADA -------------------------------------------------
Meses <- c(
"Enero" = 1,
"Febrero" = 2,
"Marzo" = 3,
"Abril" = 4,
"Mayo" = 5,
"Junio" = 6,
"Julio" = 7,
"Agosto" = 8,
"Septiembre" = 9,
"Octubre" = 10,
"Noviembre" = 11,
"Diciembre" = 12
)
ListPais <-  read.table('data/Pais_de_residencia.csv', sep=";", header = T, fileEncoding = "latin1" )
ListPais$Pais <- as.character(ListPais$Pais)
ListPais <- ListPais[order(ListPais$Pais),]
ListPais <- ListPais[!ListPais$Clave.Pais == 108,] #Quitamos Espa?a
#CARGA VALORES DE SALIDA -------------------------------------------------
#carga del fichero
Ft <- read.table('data/Frontur2015.txt', sep = ';', colClasses = "character", header=T, fileEncoding = "latin1", nrows = 1000)
#Tratamientos de los datos.
Ft_res <- Ft[,-c(1,6:14)]   #Nos quedamos con los que nos interesan
# Ft_res$CC_AA<-substr(Ft$DESTINO.PRINCIPAL, 1, 2)
Ft_res$PROVINCIA<-substr(Ft$DESTINO.PRINCIPAL, 3, 4)
Ft_res$MUNICIPIO<-substr(Ft$DESTINO.PRINCIPAL, 5, 7)
# Ft_res <- Ft_res[!Ft_res$CC_AA == "00",]
Ft_res <- Ft_res[!Ft_res$PROVINCIA == "00",]
Ft_res <- Ft_res[!Ft_res$MUNICIPIO == "000",]
Ft_res$DESTINO.PRINCIPAL <- NULL
# colnames(Ft_res)[colnames(Ft_res)=="AÑO"] <- "ANO"
#Formato datos
Ft_res$ANO <-as.factor(Ft_res$ANO)
Ft_res$MES<-as.factor(Ft_res$MES)
# Ft_res$CC_AA <- as.integer(Ft_res$CC_AA)
Ft_res$PROVINCIA <- as.integer(Ft_res$PROVINCIA)
Ft_res$MUNICIPIO <- as.integer(Ft_res$MUNICIPIO)
Ft_res$VIAJEROS <- as.numeric(Ft_res$VIAJEROS)
Ft_res$VIAJEROS <- round(Ft_res$VIAJEROS, 1)
#Reordenamos la tabla
Ft_res <- Ft_res[, c(1,2,5,6,3,4)]
#Sumamos de nuevo el numero de viajeros sin las columnas que no necesitamos.
Ft_res <- ddply(Ft_res, .(ANO, MES, PROVINCIA, MUNICIPIO, PAIS.RESIDENCIAS), summarize, VIAJEROS = sum(VIAJEROS))
#CARGA DE DATOS PROVINCIAS GEOLOCALIZADAS
# http://www.ine.es/daco/daco42/codmun/codmun11/11codmunmapa.htm
ListProv <- read.table('data/Listprov.csv', sep = ';', header = T, quote = "\"")
ListProv$NOMBRE <- as.character(ListProv$NOMBRE )
ListProv<-subset(ListProv,!(is.na(ListProv["lon"]) ))
#A?ADIMOS A CADA REGISTRO DE FROUNTUR LA LONGITUD Y LATITUD DE SU MUNICIPIO
#oPCION A - BUCLE
# Ft_res $longitude <- 0
# Ft_res $latitude <-  0
# Ft_res $NOM_MUN <- "Initial"
# for (i in 1: length(Ft_res $VIAJEROS)) {
#   Ft_res [i,]$NOM_MUN <-  ListProv[ListProv$CPRO == Ft_res [i,]$PROVINCIA & ListProv$CMUN == Ft_res [i,]$MUNICIPIO,]$NOMBRE
#   Ft_res [i,]$longitude<- ListProv[ListProv$CPRO == Ft_res [i,]$PROVINCIA & ListProv$CMUN == Ft_res [i,]$MUNICIPIO,]$lon
#   Ft_res [i,]$latitude <- ListProv[ListProv$CPRO == Ft_res [i,]$PROVINCIA & ListProv$CMUN == Ft_res [i,]$MUNICIPIO,]$lat
# }
# OPCION B - INNER
library(reshape2)
colnames(ListProv)[colnames(ListProv)=="CPRO"] <- "PROVINCIA"
colnames(ListProv)[colnames(ListProv)=="CMUN"] <- "MUNICIPIO"
colnames(ListProv)[colnames(ListProv)=="lon"] <- "longitude"
colnames(ListProv)[colnames(ListProv)=="lat"] <- "latitude"
Ft_res <- merge(Ft_res, ListProv,by.x = c("PROVINCIA","MUNICIPIO"), by.y =  c("PROVINCIA","MUNICIPIO"), all.x = TRUE )
Ft_res  <- Ft_res [!is.na(Ft_res$longitude),]
# Ft_res <- read.table('data/Frontur_CM.csv', sep = ';', colClasses = "character", header=T, fileEncoding = "latin1")
# #Formato datos
# Ft_res$ANO <-as.factor(Ft_res$ANO)
# Ft_res$MES<-as.factor(Ft_res$MES)
# # Ft_res$CC_AA <- as.integer(Ft_res$CC_AA)
# Ft_res$PROVINCIA <- as.integer(Ft_res$PROVINCIA)
# Ft_res$MUNICIPIO <- as.integer(Ft_res$MUNICIPIO)
# Ft_res$VIAJEROS <- as.numeric(Ft_res$VIAJEROS)
# Ft_res$VIAJEROS <- round(Ft_res$VIAJEROS, 1)
#
setwd("~/Proyecto- Frontour/Frontur_CM")
#CARGA VALORES DE SALIDA -------------------------------------------------
#carga del fichero
Ft <- read.table('data/Frontur2015.txt', sep = ';', colClasses = "character", header=T, fileEncoding = "latin1", nrows = 1000)
#Tratamientos de los datos.
Ft_res <- Ft[,-c(1,6:14)]   #Nos quedamos con los que nos interesan
# Ft_res$CC_AA<-substr(Ft$DESTINO.PRINCIPAL, 1, 2)
Ft_res$PROVINCIA<-substr(Ft$DESTINO.PRINCIPAL, 3, 4)
Ft_res$MUNICIPIO<-substr(Ft$DESTINO.PRINCIPAL, 5, 7)
# Ft_res <- Ft_res[!Ft_res$CC_AA == "00",]
Ft_res <- Ft_res[!Ft_res$PROVINCIA == "00",]
Ft_res <- Ft_res[!Ft_res$MUNICIPIO == "000",]
Ft_res$DESTINO.PRINCIPAL <- NULL
# colnames(Ft_res)[colnames(Ft_res)=="AÑO"] <- "ANO"
#Formato datos
Ft_res$ANO <-as.factor(Ft_res$ANO)
Ft_res$MES<-as.factor(Ft_res$MES)
# Ft_res$CC_AA <- as.integer(Ft_res$CC_AA)
Ft_res$PROVINCIA <- as.integer(Ft_res$PROVINCIA)
Ft_res$MUNICIPIO <- as.integer(Ft_res$MUNICIPIO)
Ft_res$VIAJEROS <- as.numeric(Ft_res$VIAJEROS)
Ft_res$VIAJEROS <- round(Ft_res$VIAJEROS, 1)
#Reordenamos la tabla
Ft_res <- Ft_res[, c(1,2,5,6,3,4)]
#Sumamos de nuevo el numero de viajeros sin las columnas que no necesitamos.
Ft_res <- ddply(Ft_res, .(ANO, MES, PROVINCIA, MUNICIPIO, PAIS.RESIDENCIAS), summarize, VIAJEROS = sum(VIAJEROS))
#CARGA DE DATOS PROVINCIAS GEOLOCALIZADAS
# http://www.ine.es/daco/daco42/codmun/codmun11/11codmunmapa.htm
ListProv <- read.table('data/Listprov.csv', sep = ';', header = T, quote = "\"")
ListProv$NOMBRE <- as.character(ListProv$NOMBRE )
ListProv<-subset(ListProv,!(is.na(ListProv["lon"]) ))
#A?ADIMOS A CADA REGISTRO DE FROUNTUR LA LONGITUD Y LATITUD DE SU MUNICIPIO
#oPCION A - BUCLE
# Ft_res $longitude <- 0
# Ft_res $latitude <-  0
# Ft_res $NOM_MUN <- "Initial"
# for (i in 1: length(Ft_res $VIAJEROS)) {
#   Ft_res [i,]$NOM_MUN <-  ListProv[ListProv$CPRO == Ft_res [i,]$PROVINCIA & ListProv$CMUN == Ft_res [i,]$MUNICIPIO,]$NOMBRE
#   Ft_res [i,]$longitude<- ListProv[ListProv$CPRO == Ft_res [i,]$PROVINCIA & ListProv$CMUN == Ft_res [i,]$MUNICIPIO,]$lon
#   Ft_res [i,]$latitude <- ListProv[ListProv$CPRO == Ft_res [i,]$PROVINCIA & ListProv$CMUN == Ft_res [i,]$MUNICIPIO,]$lat
# }
# OPCION B - INNER
library(reshape2)
colnames(ListProv)[colnames(ListProv)=="CPRO"] <- "PROVINCIA"
colnames(ListProv)[colnames(ListProv)=="CMUN"] <- "MUNICIPIO"
colnames(ListProv)[colnames(ListProv)=="lon"] <- "longitude"
colnames(ListProv)[colnames(ListProv)=="lat"] <- "latitude"
Ft_res <- merge(Ft_res, ListProv,by.x = c("PROVINCIA","MUNICIPIO"), by.y =  c("PROVINCIA","MUNICIPIO"), all.x = TRUE )
Ft_res  <- Ft_res [!is.na(Ft_res$longitude),]
# Ft_res <- read.table('data/Frontur_CM.csv', sep = ';', colClasses = "character", header=T, fileEncoding = "latin1")
# #Formato datos
# Ft_res$ANO <-as.factor(Ft_res$ANO)
# Ft_res$MES<-as.factor(Ft_res$MES)
# # Ft_res$CC_AA <- as.integer(Ft_res$CC_AA)
# Ft_res$PROVINCIA <- as.integer(Ft_res$PROVINCIA)
# Ft_res$MUNICIPIO <- as.integer(Ft_res$MUNICIPIO)
# Ft_res$VIAJEROS <- as.numeric(Ft_res$VIAJEROS)
# Ft_res$VIAJEROS <- round(Ft_res$VIAJEROS, 1)
#
View(Ft_res)
Ft_res_sal <- NULL
Mes <- 2
Pais <- "Francia"
PaisNum <- ListPais[ListPais$Pais == Pais, ]$Clave.Pais
ListPais <-  read.table('data/Pais_de_residencia.csv', sep=";", header = T, fileEncoding = "latin1" )
ListPais$Pais <- as.character(ListPais$Pais)
ListPais <- ListPais[order(ListPais$Pais),]
ListPais <- ListPais[!ListPais$Clave.Pais == 108,] #Quitamos Espa?a
Ft_res_sal <-  Ft_res[Ft_res$MES == Mes & Ft_res$PAIS.RESIDENCIAS == PaisNum ,]
PaisNum <- ListPais[ListPais$Pais == Pais, ]$Clave.Pais
Ft_res_sal <-  Ft_res[Ft_res$MES == Mes & Ft_res$PAIS.RESIDENCIAS == PaisNum ,]
View(Ft_res_sal)
pal <- colorFactor("Spectral", "no")
leafletProxy("map", data = Ft_res_sal) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude, radius=radius, layerId=~VIAJEROS,
stroke=FALSE, fillOpacity=0.7, fillColor= ~pal(VIAJEROS) )
# %>%
#   addLegend("bottomleft", pal=pal, values=colorData, title=colorBy, layerId="colorLegend")
})
leafletProxy("map", data = Ft_res_sal) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude, radius=radius, layerId=~VIAJEROS,
stroke=FALSE, fillOpacity=0.7, fillColor= ~pal(VIAJEROS) )
shinyServer(function(input, output, session) {
## Interactive Map ###########################################
# Clear all circles and datafames
leafletProxy("map") %>% clearShapes()
Ft_res_sal <- NULL
# Create the map
output$map <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -3.70, lat = 40.41, zoom = 6)  #Madrid
})
# FILTRAMOS LOS DATOS EN FUNCION  DE LOS PARAMETROS DE ENTRADA
observe({
#Mes seleccionado
Mes <-  input$mes
#Pais seleccionado
Pais <- input$pais
PaisNum <- ListPais[ListPais$Pais == Pais, ]$Clave.Pais
Ft_res_sal <-  Ft_res[Ft_res$MES == Mes & Ft_res$PAIS.RESIDENCIAS == PaisNum ,]
Mes <- 2
Pais <- "Francia"
# Ft_res_sal <-  Ft_res[Ft_res$MES == Mes,]
#DEFINIMOS EL COLOR DE LOS CALCULOS
# if (colorBy == "superzip") {
#   # Color and palette are treated specially in the "superzip" case, because
#   # the values are categorical instead of continuous.
#   colorData <- ifelse(zipdata$centile >= (100 - input$threshold), "yes", "no")
#   pal <- colorFactor("Spectral", colorData)
# } else {
#   colorData <- zipdata[[colorBy]]
#   pal <- colorBin("Spectral", colorData, 7, pretty = FALSE)
# }
#Calculamos el radio de los CALCULOS.
# if (sizeBy == "superzip") {
#   # Radius is treated specially in the "superzip" case.
#   radius <- ifelse(zipdata$centile >= (100 - input$threshold), 30000, 3000)
# } else {
#   radius <- zipdata[[sizeBy]] / max(zipdata[[sizeBy]]) * 30000
# }
#FORZAMOS VALORES.
# colorData <- ifelse(zipdata$centile >= (100 - 5), "yes", "no")
pal <- colorFactor("Spectral", "no")
# colorby <- "Centile score"
# sizeBy <-"superzip"
# if (sizeBy == "superzip") {
#   # Radius is treated specially in the "superzip" case.
#   radius <- ifelse(zipdata$centile >= (100 - 5), 30000, 3000)
# } else {
#   radius <- zipdata[[sizeBy]] / max(zipdata[[sizeBy]]) * 30000
# }
#
# if (length(Ft_res_sal) > 0)
#  {
#    radius <-  ((Ft_res_sal$VIAJEROS / max(Ft_res_sal$VIAJEROS)) *length(Ft_res_sal))
#  }
# radius <-  (Ft_res_sal$VIAJEROS / max(Ft_res_sal$VIAJEROS) ) * 30000
radius <-  ( 1- (Ft_res_sal$VIAJEROS / max(Ft_res_sal$VIAJEROS) )) * 30000
#pintamos los datos
# leafletProxy("map", data = zipdata) %>%
#   clearShapes() %>%
#   addCircles(~longitude, ~latitude, radius=radius, layerId=~zipcode,
#     stroke=FALSE, fillOpacity=0.4, fillColor=pal(colorData)) %>%
#   addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
#     layerId="colorLegend")
#COPIA PARA TESTEAR
leafletProxy("map", data = Ft_res_sal) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude, radius=radius, layerId=~VIAJEROS,
stroke=FALSE, fillOpacity=0.7, fillColor= ~pal(VIAJEROS) )
# %>%
#   addLegend("bottomleft", pal=pal, values=colorData, title=colorBy, layerId="colorLegend")
})
#popup explicatorio
# Show a popup at the given location
# showZipcodePopup <- function(zipcode, lat, lng) {
#   selectedZip <- allzips[allzips$zipcode == zipcode,]
#   content <- as.character(tagList(
#     tags$h4("Score:", as.integer(selectedZip$centile)),
#     tags$strong(HTML(sprintf("%s, %s %s",
#       selectedZip$city.x, selectedZip$state.x, selectedZip$zipcode
#     ))), tags$br(),
#     sprintf("Median household income: %s", dollar(selectedZip$income * 1000)), tags$br(),
#     sprintf("Percent of adults with BA: %s%%", as.integer(selectedZip$college)), tags$br(),
#     sprintf("Adult population: %s", selectedZip$adultpop)
#   ))
#   leafletProxy("map") %>% addPopups(lng, lat, content, layerId = zipcode)
# }
mostrarDetalle <- function(id, lat, lng, mes, pais) {
PaisNum <- ListPais[ListPais$Pais == pais, ]$Clave.Pais
selectedFT <- Ft_res[Ft_res$longitude == lng & Ft_res$latitude == lat & Ft_res$MES == mes & Ft_res$PAIS.RESIDENCIAS == PaisNum,   ]
content <- as.character(tagList(
tags$h4("MUNICIPIO:", selectedFT$NOM_MUN),
tags$br(),
sprintf("Viajeros: %s", selectedFT$VIAJEROS),
tags$br()
# sprintf("Media de noches : %s%%", ____), tags$br()
))
leafletProxy("map") %>% addPopups(lng, lat, content, layerId =selectedFT)
}
# When map is clicked, show a popup with city info
observe({
leafletProxy("map") %>% clearPopups()
event <- input$map_shape_click
if (is.null(event))
return()
isolate({
mostrarDetalle(event$id, event$lat, event$lng, input$mes, input$pais)
})
})
})
radius <-  ( 1- (Ft_res_sal$VIAJEROS / max(Ft_res_sal$VIAJEROS) )) * 30000
raius
radius
View(Ft_res_sal)
Ft_res_sal$VIAJEROS / max(Ft_res_sal$VIAJEROS
